#INCLUDE "18F4550.h"
//#INCLUDE <stdio.h>
//#INCLUDE <stdlib.h>
//#INCLUDE <string.h>
//#INCLUDE <math.h>

#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL4,CPUDIV1,VREGEN

#use delay(clock=16000000)
//#device adc=8 //Usa resolución de 8 bits

         //handles usb setup tokens and get descriptor reports




#define USB_HID_DEVICE     FALSE             //deshabilitamos el uso de las directivas HID
#define USB_EP1_TX_ENABLE  USB_ENABLE_BULK   //turn on EP1(EndPoint1) for IN bulk/interrupt transfers
#define USB_EP1_RX_ENABLE  USB_ENABLE_BULK   //turn on EP1(EndPoint1) for OUT bulk/interrupt transfers
#define USB_EP1_TX_SIZE    1                 //size to allocate for the tx endpoint 1 buffer
#define USB_EP1_RX_SIZE    3                 //size to allocate for the rx endpoint 1 buffer



#use fast_io(b) //Hay que configurar manualmente el trisb

#include "usb.c"
#include "usb_desc_scope.h" //Configuración del USB por Enumerador Palitroquez
#include "pic18_usb.h"     //Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver


void main(void) {

   int8 recibe[2];                  //declaramos variables
   int8 envia[1];
   
   set_tris_d(0x00); //Todo salidas
   set_tris_a(0xff); //Todo entradas
   output_b(0x00);
   
   output_low(PIN_D7); //Apaga led para indicar que no ha sido detectado por pc
   
   setup_adc (adc_clock_div_32); //Enciende ADC
   setup_adc_ports (AN0_ANALOG); //Elige terminales análogicas
   set_adc_channel (0); //Elige canal a medir
   
   usb_init();                      //inicializamos el USB
   usb_task();                      //habilita periferico usb e interrupciones
   usb_wait_for_enumeration();      //esperamos hasta que el PicUSB sea configurado por el host
   
   output_high(PIN_D7); //Ya fue detectado por PC
   delay_ms(500);
   output_low(PIN_D7); //Ya fue detectado por PC
   delay_ms(500);
   output_high(PIN_D7); //Ya fue detectado por PC
   delay_ms(500);
   output_low(PIN_D7); //Ya fue detectado por PC
   delay_ms(500);
   output_high(PIN_D7); //Ya fue detectado por PC
   delay_ms(500);
   output_low(PIN_D7); //Ya fue detectado por PC
   delay_ms(500);
   
   while (1)
   {
      if(usb_enumerated())          //si el PicUSB está configurado
      {
         if (usb_kbhit(1))          //si el endpoint de salida contiene datos del host
         {
            usb_get_packet(1, recibe, 2);
            if(recibe[0] == 0xff) // Debe activar BCD
               output_b(~recibe[1]); //display ánodo común
            if(recibe[0]==0x00)
               {
               envia[0]=read_adc (); //Hace conversión AD
               usb_put_packet(1, envia, 1, USB_DTS_TOGGLE);
               }
         }
      }
   }
}

